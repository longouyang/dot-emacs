#+TITLE: Literate .emacs
#+AUTHOR: Long Ouyang
#+PROPERTY: tangle yes
#+HIDESTARS: yes

* Load path

The normal-top-level-add-subdirs-to-load-path bit is HT http://emacswiki.org/emacs/LoadPath

#+BEGIN_SRC emacs-lisp
(let ((default-directory "~/dot-emacs/"))
      (normal-top-level-add-subdirs-to-load-path))
(add-to-list 'load-path "~/dot-emacs/")
#+END_SRC

* Copy important environment variables from my shell into emacs exec-path
 
HT https://github.com/purcell/exec-path-from-shell
  
2013/09/30, downloaded raw file from github and added here 

#+begin_src emacs-lisp
(load "exec-path-from-shell.el")
(exec-path-from-shell-initialize)
#+end_src

* Environment variables
  #+begin_src emacs-lisp
  (setenv "PATH" (concat "/usr/texbin" ":" (getenv "PATH")))
  #+end_src

  Make C-x f use HOME as the default directory
  #+BEGIN_SRC emacs-lisp
  (setq default-directory (concat (getenv "HOME") "/"))
  #+END_SRC
  
* Backups

#+BEGIN_SRC emacs-lisp
;; this no longer worked on my 24.3 install on mavericks
; (defun make-backup-file-name (file)
;   (concat "~/.emacs_backups/" (file-name-nondirectory file) "~"))

;; HT http://stackoverflow.com/a/151946
(setq backup-directory-alist '(("." . "~/.emacs_backups")))
#+END_SRC

* Search

** Auto wrap isearch
#+BEGIN_SRC emacs-lisp
(defadvice isearch-repeat (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-repeat 'after 'isearch-no-fail)
    (ad-activate 'isearch-repeat)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-repeat 'after 'isearch-no-fail)
    (ad-activate 'isearch-repeat)))

(defadvice isearch-search (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)))
#+END_SRC

* Appearance
** Disable splash screen, scroll bar, toolbar, reduce fringe

Disabling scroll bars w/o custom-set-variable: http://emacswiki.org/emacs/ScrollBar

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (fringe-mode '(4 . 4))
)
#+END_SRC

** Solarized
NB: need to have iterm2 set to report TERM=xterm-16color
for solarized colors to look right in terminal
(https://github.com/sellout/emacs-color-theme-solarized/issues/71)

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/dot-emacs/vendor/solarized")
(load-theme 'solarized-light t)
#+END_SRC

disable theme before switching using =load-theme=
http://stackoverflow.com/a/15595000/351392
#+BEGIN_SRC emacs-lisp
(defadvice load-theme 
  (before theme-dont-propagate activate)
  (mapcar #'disable-theme custom-enabled-themes))
#+END_SRC

** Use Inconsolata font
#+BEGIN_SRC emacs-lisp
(when (member "Inconsolata" (font-family-list))
	    (set-default-font "Inconsolata")
	    (set-face-attribute 'default nil :font "Inconsolata" :height 140))
#+END_SRC

** Colors in shell mode
FIXME
#+BEGIN_SRC emacs-lisp
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

* Expand-region
#+begin_src emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-.") 'er/expand-region)
#+end_src
* yasnippet
#+begin_src emacs-lisp
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/dot-emacs/snippets/ess-mode")
(yas-global-mode 1)
#+end_src
* ESS
#+BEGIN_SRC emacs-lisp
(require 'ess-site)
(ess-toggle-underscore nil)

(load "htmlize.el")
#+END_SRC


  keyboard shortcut for eval-buffer-and-go
  #+BEGIN_SRC emacs-lisp
(add-hook 'ess-mode-hook (lambda ()
                           (local-set-key (kbd "s-r") 'ess-eval-buffer-and-go)))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (local-set-key (kbd s-r) (quote ess-eval-buffer-and-go)) |

  inferior-ess-mode-hook
  #+BEGIN_SRC emacs-lisp
(add-hook 'inferior-ess-mode-hook (lambda ()
                                    (progn
                                      (set-variable 'comint-scroll-to-bottom-on-output 'this)
                                      (set-variable 'comint-scroll-show-maximum-output t)
                                      (set-variable 'comint-scroll-to-bottom-on-input 'this))))

  #+END_SRC

  #+RESULTS:
  | lambda | nil | (progn (set-variable (quote comint-scroll-to-bottom-on-output) (quote this)) (set-variable (quote comint-scroll-show-maximum-output) t) (set-variable (quote comint-scroll-to-bottom-on-input) (quote this))) |



* Major modes
** Org
*** visual line mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (visual-line-mode 1)))
#+END_SRC
    
*** example blocks background

    #+begin_example
    
    #+end_example
    
*** src indentation 
HT http://stackoverflow.com/questions/9764583/strange-indentation-within-emacs-org-mode-src-block

#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

*** Load languages

#+BEGIN_SRC emacs-lisp
(require 'org)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (emacs-lisp . t)
   (ruby . t)
   (sh . t)
   (python .t)
   (scheme . t)
   ))

(setq org-src-fontify-natively t)
(setq org-src-window-setup (quote current-window))
(setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Open URLs in Chrome
#+BEGIN_SRC emacs-lisp
(defun open-url-in-chrome (url)
  "Open URL in Google Chrome.  I use AppleScript to do several things:
  1. I tell Chrome to come to the front. If Chrome wasn't launched, this will also launch it.
  2. If Chrome has no windows open, I tell it to create one.
  3. If Chrome has a tab showing URL, I tell it to reload the tab, make that tab the active tab in its window, and bring its window to the front.
  4. If Chrome has no tab showing URL, I tell Chrome to make a new tab (in the front window) showing URL."
  (when (symbolp url)
    ; User passed a symbol instead of a string.  Use the symbol name.
    (setq url (symbol-name url)))
  (do-applescript (format "
tell application \"Google Chrome\"
        activate
        set theUrl to %S
        if character 1 of theUrl is \"/\" then
                set theUrl to \"file://\" & theUrl
        end if

        if (count every window) = 0 then
                make new window
                set URL of active tab of window 1 to theURL
        end if


        set found to false
        set theTabIndex to -1
        repeat with theWindow in every window
                set theTabIndex to 0
                repeat with theTab in every tab of theWindow
                        set theTabIndex to theTabIndex + 1
                        if theTab's URL = theUrl then
                                set found to true
                                exit
                        end if
                end repeat

                if found then
                        exit repeat
                end if
        end repeat

        if found then
                tell theTab to reload
                set theWindow's active tab index to theTabIndex
                set index of theWindow to 1
        else
               set theTab to make new tab at end of tabs of window 1
               set URL of theTab to theURL
        end if
end tell" url)))

(defun replace-org-export-as-html-and-open ()
  (defun org-export-as-html-and-open (arg)
    "long"
    (interactive "P")
    (org-export-as-html arg 'hidden)
    (message buffer-file-name)
    (open-url-in-chrome buffer-file-name)
    (when org-export-kill-product-buffer-when-displayed
      (kill-buffer (current-buffer))))
)

(add-hook 'org-mode-hook 'replace-org-export-as-html-and-open)
#+END_SRC

*** LaTeX

FIXME. Oh god this is a shambles.

cribbed a bunch from http://kieranhealy.org/blog/archives/2011/01/21/exporting-org-mode-to-pdf-via-xelatex/

#+BEGIN_SRC emacs-lisp

;; (require 'org-latex)
;; (setq org-export-latex-listings t)

;; (defun my-auto-tex-cmd ()
;;   "When exporting from .org with latex, automatically run latex,
;;    pdflatex, or xelatex as appropriate, using latemxk."
;;   (let ((texcmd)))
;;     ;; default command: oldstyle latex via dvi
;;     (setq texcmd "latexmk -dvi -pdfps %f")
;;     ;; pdflatex -> .pdf
;;     (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
;; 	(setq texcmd "latexmk -pdf %f"))
;;     ;; xelatex -> .pdf
;;     (if (string-match "LATEX_CMD: xelatex" (buffer-string))
;; 	(setq texcmd "latexmk -pdflatex=xelatex -pdf %f"))
;;     (setq org-latex-to-pdf-process (list texcmd)))

;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)

;; ;; Default packages included in every tex file, pdflatex or xelatex
;; (setq org-export-latex-packages-alist
;;       '(("" "graphicx" t)
;; 	("" "longtable" nil)
;; 	("" "float" nil)))


(add-hook 'LaTeX-mode-hook
          (lambda ()
            ;; Enable source-specials for Control-click forward/reverse search.
            (TeX-PDF-mode 1)
            (TeX-source-correlate-mode 1)
            (setq TeX-source-correlate-method 'synctex)

            (setq TeX-view-program-list
                  '(("Skim"
                     "/Applications/Skim.app/Contents/SharedSupport/displayline -g %n %o %b"))
                  TeX-view-program-selection
                  '((output-pdf "Skim")))))

;; (defun my-auto-tex-parameters ()
;;   "Automatically select the tex packages to include."
;;   ;; default packages for ordinary latex or pdflatex export
;;   (setq org-export-latex-default-packages-alist
;; 	'(("AUTO" "inputenc" t)
;; 	  ("T1"   "fontenc"   t)
;; 	  (""     "fixltx2e"  nil)
;; 	  (""     "wrapfig"   nil)
;; 	  (""     "soul"      t)
;; 	  (""     "textcomp"  t)
;; 	  (""     "marvosym"  t)
;; 	  ("nointegrals" "wasysym"   t)
;; 	  (""     "latexsym"  t)
;; 	  (""     "amssymb"   t)
;; 	  (""     "amsmath"   t)
;; 	  (""     "hyperref"  nil)))
  
;;   ;; Packages to include when xelatex is used
;;   ;; (see https://github.com/kjhealy/latex-custom-kjh for the 
;;   ;; non-standard ones.)
;;   (if (string-match "LATEX_CMD: xelatex" (buffer-string))
;;       (setq org-export-latex-default-packages-alist
;; 	    '(("" "fontspec" t)
;; 	      ("" "xunicode" t)
;; 	      ("" "url" t)
;; 	      ("" "rotating" t)
;; ;;	      ("" "memoir-article-styles" t)
;; ;;	      ("american" "babel" t)
;; 	      ("babel" "csquotes" t)
;; 	      ("" "listings" nil)
;; 	      (""     "amssymb"   t)
;; 	      (""     "amsmath"   t)
;; ;;	      ("" "listings-sweave-xelatex" nil)
;; 	      ("svgnames" "xcolor" t)
;; 	      ("" "soul" t)
;; 	      ("xetex, colorlinks=true, urlcolor=FireBrick, plainpages=false, pdfpagelabels, bookmarksnumbered" "hyperref" nil)
;; 	      )))
  
;;   ;; (if (string-match "LATEX_CMD: xelatex" (buffer-string))
;;   ;;     (setq org-export-latex-classes
;;   ;; 	    (cons '("article"
;;   ;; 		    "\\documentclass[letterpaper]{article}
;;   ;; \\usepackage[style=authoryear-comp-ajs, abbreviate=true]{biblatex}
;;   ;; \\bibliography{refs}"
;;   ;; 		    ("\\section{%s}" . "\\section*{%s}")
;;   ;; 		    ("\\subsection{%s}" . "\\subsection*{%s}")
;;   ;; 		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;   ;; 		    ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;   ;; 		    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
;;   ;; 		  org-export-latex-classes)))
;; )

;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)

(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
#+END_SRC

*** Display images inline after code evaluation

HT: https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org

TODO: only run org-display-inline-images after execution if STARTUP: inlineimages is set
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
#+end_src 
*** org-src

bind s-s to org-edit-src-save:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-src-mode-hook (lambda ()
                               (local-set-key (kbd "s-s") 'org-edit-src-save)))
#+END_SRC

** Church
#+BEGIN_SRC emacs-lisp
(require 'church)
(setq quack-fontify-style nil)
(setq quack-programs (quote ("o" "bigloo" "csi" "csi -hygienic" "gosh" "gracket" "gsi" "gsi ~~/syntax-case.scm -" "guile" "kawa" "mit-scheme" "racket" "racket -il typed/racket" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi" "ikarus" "ssh -t alonzo@nospoon.mit.edu ikarus")))
#+END_SRC

** Haskell
#+begin_src emacs-lisp
(load "haskell-site-file")
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
#+end_src
** Tuareg (OCaml)
#+begin_src emacs-lisp
;;; append-tuareg.el - Tuareg quick installation: Append this file to .emacs.
(setq auto-mode-alist (cons '("\\.ocaml\\w?" . tuareg-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.ml\\w?" . tuareg-mode) auto-mode-alist))
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'camldebug "camldebug" "Run the Caml debugger" t)
#+end_src
** LaTeX
#+begin_src emacs-lisp
(setq LaTeX-command "latex -synctex=1")
#+end_src

Helper function for git-friendly formatting
bind to M-n
#+begin_src emacs-lisp
(defun tex-git-friendly ()
  (interactive)
  (replace-string ". " ".\n" nil (region-beginning) (region-end))
  )

(defun LaTeX-mode-keys ()
  "Modify keymaps used by `LaTeX-mode'."

  ;; format a selection in a git-friendly manner (one line per paragraph)
  (local-set-key (kbd "M-n") 'tex-git-friendly)
  ;; shortcut for bold
  (local-set-key (kbd "s-b") (lambda ()  (interactive) (TeX-font nil ?\C-b)))
  ;; shortcut for italic italic
  (local-set-key (kbd "s-i") (lambda ()  (interactive) (TeX-font nil ?\C-e))) 
  )

(add-hook 'LaTeX-mode-hook 'LaTeX-mode-keys)
#+end_src

visual line mode
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda ()
                           (visual-line-mode 1)))
#+END_SRC

** js2
2013/03/19: installed and compiled according to https://code.google.com/p/js2-mode/wiki/InstallationInstructions

But note that I change the filename from js2 to js2-mode, so I had to change the second argument of the autoload line below

2013/03/21: apparently Steve Yegge's google code repository is no longer under active development, so I reinstalled from the mooz github repository (https://github.com/mooz/js2-mode)


#+begin_src emacs-lisp
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+end_src
*** Declaring globals

js2-mode underlines undefined variables, which might actually be defined because, say, they're included in a different script. On the emacswiki page, Tim Meadowcroft has a fix for this

http://emacswiki.org/emacs/Js2Mode

#+begin_src emacs-lisp
;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
;; add any symbols to a buffer-local var of acceptable global vars
;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
;; you can;t have a symbol called "someName:false"
(add-hook 'js2-post-parse-callbacks
	  (lambda ()
	    (when (> (buffer-size) 0)
	      (let ((btext (replace-regexp-in-string
			    ": *true" " "
			    (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
		(mapc (apply-partially 'add-to-list 'js2-additional-externs)
		      (split-string
		       (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
		       " *, *" t))
		))))
#+end_src

*** Allow missing semi colons
#+begin_src emacs-lisp
;(setq js2-missing-semi-one-line-override t)
(setq js2-strict-missing-semi-warning nil)
#+end_src

*** Soft tabs

Do soft tabs in javascript and use only 4 spaces rather than 8

HT http://stackoverflow.com/a/7957258/351392 for indent-tabs-mode and js2-mode-hook parts

#+begin_src emacs-lisp
(setq js2-mode-hook
  '(lambda () (progn
    (setq indent-tabs-mode nil)
    (setq js2-basic-offset 4))))
#+end_src

TODO: figre out how to globally set js2-basic-offset to 2, rather than patching it in with the mode hook

** Python
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+end_src

#+RESULTS:
: 2


   #+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (function (lambda ()
                      (setq indent-tabs-mode nil
                            tab-width 2
                            python-indent-offset 2 ;; HT http://www.emacswiki.org/emacs/IndentingPython
                            ))))
   #+end_src

   #+RESULTS:
   | er/add-python-mode-expansions | make-enter-indent | (lambda nil (setq indent-tabs-mode nil tab-width 2)) |


** Markdown
   #+begin_src emacs-lisp
     (autoload 'markdown-mode "markdown-mode"
       "Major mode for editing Markdown files" t)
     (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
     (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
     (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
   #+end_src


   I'm apparently using the markdown parser from Ruby's gems, which doesn't play nice with markdown previews / exports. 
   #+begin_src emacs-lisp
(custom-set-variables '(markdown-command "~/Library/Haskell/bin/pandoc"))
   #+end_src

   Use a css file in ~/dot-emacs/markdown.css (FIXME: doesn't work currently)
   #+begin_src emacs-lisp
(custom-set-variables '(markdown-css-path "//localhost/Users/longouyang/dot-emacs/markdown.css"))
   #+end_src

   #+RESULTS:

** shell

   good directory tracking (so autocomplete works even after I use z to jump around)
   HT http://www.emacswiki.org/emacs/ShellDirtrackByProcfs

   by default, on osx, the messages buffer complains about:
   #+BEGIN_EXAMPLE
error in process filter: locate-file: Wrong type argument: stringp, nil
error in process filter: Wrong type argument: stringp, nil
   #+END_EXAMPLE

   this is because /proc doesn't exist. i had to hack this in using lsof (HT http://stackoverflow.com/a/8331292/351392)

   #+begin_src emacs-lisp
(defun track-shell-directory/procfs ()
  (shell-dirtrack-mode 0)
  (add-hook 'comint-preoutput-filter-functions
            (lambda (str)
              (prog1 str
                (when (string-match comint-prompt-regexp str) 
                  (cd
                   (car (last (split-string (shell-command-to-string (format "lsof -d cwd | grep %s | tail -1 | tr -d \"\n\" | sed 's/[ \t]*//' "
                                                                             (process-id (get-buffer-process (current-buffer)))))
                                            " ")))
                   ;; (file-symlink-p
                      ;;  (format "/proc/%s/cwd" (process-id
                      ;;                          (get-buffer-process
                      ;;                           (current-buffer)))))
                      ))))
            nil t)
  )

(add-hook 'shell-mode-hook 'track-shell-directory/procfs)
   #+end_src

   helper function to load shell based on current buffer's directory

   #+BEGIN_SRC emacs-lisp
   (require 'shell-current-directory)
   #+END_SRC
   
** dired

   Cut details from dired listing
   HT http://www.emacswiki.org/emacs/DiredDetails
   #+begin_src emacs-lisp 
(require 'dired-details)
(dired-details-install)
(set-variable 'dired-details-hidden-string "- ")
   #+end_src

   List directories first
   HT http://www.emacswiki.org/emacs/DiredSortDirectoriesFirst
   #+begin_src emacs-lisp
   (setq dired-listing-switches "-alXGh --group-directories-first")
   #+end_src

** julia
   #+BEGIN_SRC emacs-lisp
(require 'julia-mode)
   #+END_SRC
* Minor modes
** Ace jump mode
#+BEGIN_SRC emacs-lisp
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)

(setq ace-jump-mode-scope 'frame)

(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
#+END_SRC

** Magit
used to be vendored, but installed from elpa
   
Bind M-g to magit-status

#+begin_src emacs-lisp
(global-set-key (kbd "M-g") 'magit-status)
#+end_src


show fine differences at current hunk
HT https://github.com/vincentbernat/dot.emacs/blob/master/magit.conf.el
HT google for < "word-diff" magit >
#+BEGIN_SRC emacs-lisp
(setq magit-diff-refine-hunk t) 
#+END_SRC

** Paredit
#+begin_src emacs-lisp
  (autoload 'paredit-mode "paredit"
    "Minor mode for pseudo-structurally editing Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
  (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
  (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
  (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
#+end_src

#+RESULTS:

Use electric-pair-mode for non-lisps:
#+begin_src emacs-lisp
  ;; HT http://stackoverflow.com/a/913823/351392
  ;; HT http://stackoverflow.com/questions/5298907/emacs-php-mode-and-paredit#comment12995031_5324458
  
  (electric-pair-mode)
#+end_src

* Misc

** rename file and buffer
#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC

* Keyboard
** Enter indents

HT http://emacswiki.org/emacs/AutoIndentation
#+begin_src emacs-lisp
(defun make-enter-indent ()
  (local-set-key (kbd "RET") 'newline-and-indent))

(add-hook 'js2-mode-hook 'make-enter-indent)
(add-hook 'python-mode-hook 'make-enter-indent)
(add-hook 'html-mode-hook 'make-enter-indent)
(add-hook 'org-mode-hook 'make-enter-indent)
#+end_src


** Copy/paste
#+BEGIN_SRC emacs-lisp
;; emacs 23.1 and later joins the system clipboard with the
;; emacs killring. get rid of this.
;; taken from: http://emacswiki.org/emacs/CopyAndPaste#toc10
;; (setq interprogram-cut-function 'x-select-text)
;; (setq interprogram-paste-function x-cut-buffer-or-selection-value)
(setq interprogram-cut-function nil)
(setq interprogram-paste-function nil)
(defun paste-from-pasteboard ()
  (interactive)
  (and mark-active (filter-buffer-substring (region-beginning) (region-end) t))
  (insert (ns-get-pasteboard))
  )
(defun copy-to-pasteboard (p1 p2)
  (interactive "r*")
  (ns-set-pasteboard (buffer-substring p1 p2))
  (message "Copied selection to pasteboard")
  )
(defun cut-to-pasteboard (p1 p2) (interactive "r*") (ns-set-pasteboard (filter-buffer-substring p1 p2 t)) )
(global-set-key (kbd "s-v") 'paste-from-pasteboard)
(global-set-key (kbd "s-c") 'copy-to-pasteboard)
(global-set-key (kbd "s-x") 'cut-to-pasteboard)
#+END_SRC

** Autoindent yanked code
Make sure pasted code is automatically indented, HT http://emacswiki.org/emacs/AutoIndentation
#+begin_src emacs-lisp
(dolist (command '(yank yank-pop))
  (eval `(defadvice ,command (after indent-region activate)
	   (and (not current-prefix-arg)
		(member major-mode '(emacs-lisp-mode lisp-mode
						     clojure-mode    scheme-mode
						     haskell-mode    ruby-mode
						     rspec-mode      python-mode
						     c-mode          c++-mode
						     objc-mode       latex-mode
						     plain-tex-mode  js2-mode
						     html-mode))
		(let ((mark-even-if-inactive transient-mark-mode))
		  (indent-region (region-beginning) (region-end) nil))))))
#+end_src

#+RESULTS:

** Comments
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-=") 'comment-region)
(global-set-key (kbd "C-c C--") 'uncomment-region)
#+END_SRC

** Next/previous window

#+BEGIN_SRC emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))

(defun longs-next-window ()
  (interactive)
  (other-window 1))

(global-set-key (kbd "C-x p") 'prev-window)
(global-set-key (kbd "s-}") 'longs-next-window)
(global-set-key (kbd "s-{") 'prev-window)
#+END_SRC

** windmove ("geographic"  window switching)

   HT http://www.emacswiki.org/emacs/SwitchingBuffers#toc8
   
#+begin_src emacs-lisp
(global-set-key (kbd "<s-left>") 'windmove-left) 
(global-set-key (kbd "<s-right>") 'windmove-right) 
(global-set-key (kbd "<s-up>") 'windmove-up) 
(global-set-key (kbd "<s-down>") 'windmove-down)
#+end_src

** delete-window

   s-0 as a shorter version of C-x 0

   #+begin_src emacs-lisp
   (global-set-key (kbd "s-0") 'delete-window)
   #+end_src

** Go to indent
Remap from default M-m to M-i
HT http://emacsrocks.com/e04.html (around 1:15 in video)
#+begin_src emacs-lisp
(define-key global-map (kbd "M-i") 'back-to-indentation)
#+end_src 
** Key chords
#+begin_src emacs-lisp
(require 'key-chord)
(key-chord-mode 1)
(key-chord-define-global "jk" 'ace-jump-mode)
#+end_src

** M-m replace-string M-M replace-regexp
#+begin_src emacs-lisp
(global-set-key (kbd "M-m") 'replace-string)
#+end_src

   #+begin_src emacs-lisp
(global-set-key (kbd "M-M") 'replace-regexp)
#+end_src


* todo setup

  #+begin_src emacs-lisp
    (defun tdo ()
      (interactive)
    
    ;; HT http://www.gnu.org/software/emacs/manual/html_node/emacs/Select-Buffer.html
      (switch-to-buffer-other-frame "todo"))
    
  #+end_src

* lazy writing (capitalize heads of sentences)

  epic fail
  #+begin_comment
    (defun replace-regexp (regexp to-string &optional delimited start end)
    ;;  (message to-string)
      (interactive
       (let ((common
              (query-replace-read-args
               (concat "Replace"
                       (if current-prefix-arg " word" "")
                       " regexp"
                       (if (and transient-mark-mode mark-active) " in region" ""))
               t)))
         (list (nth 0 common) (nth 1 common) (nth 2 common)
               (if (and transient-mark-mode mark-active)
                   (region-beginning))
               (if (and transient-mark-mode mark-active)
                   (region-end)))))
      (perform-replace regexp to-string nil t delimited nil nil start end))
    
    (defun capitalize-head ()
      (interactive)
       (replace-regexp "\\(^\\|\\. \\)\\([a-z]\\)"
                      (replace-eval-replacement concat "\\1" (replace-quote (upcase (match-string 2))))))
    
    a b c. d e f. g h i.
    
    
  #+end_comment


* custom face setting
  #+begin_src emacs-lisp
 ;;  (custom-set-faces
 ;; ;; custom-set-faces was added by Custom.
 ;; ;; If you edit it by hand, you could mess it up, so be careful.
 ;; ;; Your init file should contain only one such instance.
 ;; ;; If there is more than one, they won't work right.
 ;;  '(org-block ((t (:inherit shadow :background "DarkSlateGray" :foreground "Black")))))
  #+end_src

  #+RESULTS:



* git

  use --word-diff in magit-diff-options (TODO: colors don't actually show up)
  #+begin_src emacs-lisp
  ;; (setq magit-diff-options (list "--color" "--word-diff=color"))
  (setq magit-diff-options nil)
  #+end_src


* list of installed packages 
  * yasnippet (ELPA)
    installed 2014/01/09
  * auctex (ELPA)
    installed 2014/01/11
    updated from "11.87.2012-12-04" to ""  2014/11/07
  * adding marmalade as a source

    #+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives 
    '("marmalade" .
      "http://marmalade-repo.org/packages/"))
(package-initialize)
    #+END_SRC
   
  * load-theme-buffer-local (marmalade)

    installed 2014/02/01
  
    HT http://lists.gnu.org/archive/html/help-gnu-emacs/2012-10/msg00431.html (googled)
    HT https://github.com/vic/color-theme-buffer-local

    
