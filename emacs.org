#+TITLE: Literate .emacs
#+AUTHOR: Long Ouyang
#+PROPERTY: tangle yes
#+STARTUP: hidestars
#+STARTUP: indent

* TODO

change font-lock-global-face to some brighter color (whatever it used to be)

* Load path

The normal-top-level-add-subdirs-to-load-path bit is HT http://emacswiki.org/emacs/LoadPath

#+BEGIN_SRC emacs-lisp
(let ((default-directory "~/dot-emacs/"))
      (normal-top-level-add-subdirs-to-load-path))
(add-to-list 'load-path "~/dot-emacs/")
#+END_SRC

* Copy important environment variables from my shell into emacs exec-path

HT https://github.com/purcell/exec-path-from-shell

2013/09/30, downloaded raw file from github and added here

#+begin_src emacs-lisp
(load "exec-path-from-shell.el")
(exec-path-from-shell-initialize)
#+end_src

* Environment variables
#+begin_src emacs-lisp
(setenv "PATH" (concat "/usr/texbin" ":" (getenv "PATH")))
#+end_src

Make C-x f use HOME as the default directory
#+BEGIN_SRC emacs-lisp
(setq default-directory (concat (getenv "HOME") "/"))
#+END_SRC

unicode characters weren't coming from pbpaste with the right encoding
HT http://stackoverflow.com/a/24639415/351392

#+BEGIN_SRC emacs-lisp
(setenv "LANG" "en_US.UTF-8")
#+END_SRC

* Backups and autosaves

Change auto-backups directory
HT http://stackoverflow.com/a/151946
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs_backups")))
#+END_SRC

Disable auto-saves
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

i tried changing the auto-save dir but couldn't get it to work:

** attempt

followed instructions in:
http://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/

* Utilities
** use-package

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(setq use-package-verbose t)
#+END_SRC

** Key chords
#+begin_src emacs-lisp
(use-package key-chord
  :config
  (key-chord-mode 1))
#+end_src

** read-lines
#+BEGIN_SRC emacs-lisp
;; HT http://ergoemacs.org/emacs/elisp_read_file_content.html
(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))
#+END_SRC
** rename file and buffer
#+BEGIN_SRC emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC

** remove trailing whitespace before save

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* encoding

HT:
http://www.emacswiki.org/emacs/UnicodeEncoding
https://github.com/senny/cabbage/issues/42

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

#+RESULTS:

* Package management

#+BEGIN_SRC emacs-lisp
(require 'url-handlers) ;; HT https://lists.gnu.org/archive/html/emacs-devel/2015-11/msg01546.html
(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC

* Keyboard
** Enter indents

HT http://emacswiki.org/emacs/AutoIndentation
#+begin_src emacs-lisp
(defun make-enter-indent ()
  (local-set-key (kbd "RET") 'newline-and-indent))

(add-hook 'python-mode-hook 'make-enter-indent)
(add-hook 'html-mode-hook 'make-enter-indent)
(add-hook 'org-mode-hook 'make-enter-indent)
#+end_src

** Copy/paste
#+BEGIN_SRC emacs-lisp
;; emacs 23.1 and later joins the system clipboard with the
;; emacs killring. get rid of this.
;; taken from: http://emacswiki.org/emacs/CopyAndPaste#toc10
;; (setq interprogram-cut-function 'x-select-text)
;; (setq interprogram-paste-function x-cut-buffer-or-selection-value)
(setq interprogram-cut-function nil)
(setq interprogram-paste-function nil)

(defun paste-from-pasteboard ()
  (interactive)
  (insert (shell-command-to-string "pbpaste")))

;; HT https://github.com/p-baleine/dot-emacs/blob/master/osx-clipboard.el
(defun copy-to-pasteboard ()
  (interactive)
  (if (or (and (boundp 'mark-active) mark-active)
          (and (fboundp 'region-exists-p) (region-exists-p)))
      (call-process-region
       (region-beginning) (region-end) "pbcopy" nil t t)))

(global-set-key (kbd "s-v") 'paste-from-pasteboard)
(global-set-key (kbd "s-c") 'copy-to-pasteboard)
#+END_SRC

** Autoindent yanked code
Make sure pasted code is automatically indented, HT http://emacswiki.org/emacs/AutoIndentation
#+begin_src emacs-lisp
(dolist (command '(yank yank-pop))
  (eval `(defadvice ,command (after indent-region activate)
	   (and (not current-prefix-arg)
		(member major-mode '(emacs-lisp-mode lisp-mode
						     clojure-mode    scheme-mode
						     haskell-mode    ruby-mode
						     rspec-mode      python-mode
						     c-mode          c++-mode
						     objc-mode       latex-mode
						     plain-tex-mode  js2-mode
						     html-mode))
		(let ((mark-even-if-inactive transient-mark-mode))
		  (indent-region (region-beginning) (region-end) nil))))))
#+end_src

#+RESULTS:

** Comments
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-=") 'comment-region)
(global-set-key (kbd "C-c C--") 'uncomment-region)
#+END_SRC

** Next/previous window

#+BEGIN_SRC emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))

(defun longs-next-window ()
  (interactive)
  (other-window 1))

(global-set-key (kbd "C-x p") 'prev-window)
(global-set-key (kbd "s-}") 'longs-next-window)
(global-set-key (kbd "s-{") 'prev-window)
#+END_SRC

** windmove ("geographic" window switching)

HT http://www.emacswiki.org/emacs/SwitchingBuffers#toc8

#+begin_src emacs-lisp
(global-set-key (kbd "<s-left>") 'windmove-left)
(global-set-key (kbd "<s-right>") 'windmove-right)
(global-set-key (kbd "<s-up>") 'windmove-up)
(global-set-key (kbd "<s-down>") 'windmove-down)
#+end_src

** delete-window

s-0 as a shorter version of C-x 0

#+begin_src emacs-lisp
(global-set-key (kbd "s-0") 'delete-window)
#+end_src

** Go to indent
Remap from default M-m to M-i
HT http://emacsrocks.com/e04.html (around 1:15 in video)

#+begin_src emacs-lisp
(define-key global-map (kbd "M-i") 'back-to-indentation)
#+end_src

** M-m replace-string M-M replace-regexp
#+begin_src emacs-lisp
(global-set-key (kbd "M-m") 'replace-string)
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "M-M") 'replace-regexp)
#+end_src

** toggling window split

HT http://www.emacswiki.org/emacs/ToggleWindowSplit
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(global-set-key (kbd "C-x 4") 'toggle-window-split)
#+END_SRC

** helm

HT http://tuhdo.github.io/helm-intro.html

#+BEGIN_SRC emacs-lisp

(require 'helm)
(require 'helm-config)

(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(global-set-key (kbd "C-x C-f") 'helm-find-files)

;; disable prompt for creating new files
;; HT http://emacs.stackexchange.com/a/10918/3964
(setq helm-ff-newfile-prompt-p nil)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      ;;helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      ;;helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)
#+END_SRC

#+RESULTS:
: t

** projectile

HT http://tuhdo.github.io/helm-projectile.html

#+BEGIN_SRC emacs-lisp
(projectile-global-mode)
(setq projectile-completion-system 'helm)
;;(helm-projectile-on)
(define-key projectile-mode-map [?\s-g] 'projectile-grep)
#+END_SRC

when grepping, hide the header:

HT http://stackoverflow.com/a/16133543/351392
#+BEGIN_SRC emacs-lisp
(defun delete-grep-header ()
  (save-excursion
    (with-current-buffer grep-last-buffer
      (goto-line 5)
      (narrow-to-region (point) (point-max)))))

(defadvice grep (after delete-grep-header activate) (delete-grep-header))
(defadvice rgrep (after delete-grep-header activate) (delete-grep-header))
#+END_SRC

** s-e: eval-region

#+BEGIN_SRC emacs-lisp
(bind-key "s-e" 'eval-region)
#+END_SRC

** s-b: switch buffer

#+BEGIN_SRC emacs-lisp
(bind-key "s-b" 'buffer-menu)
#+END_SRC

** shortcut: insert today's date

#+BEGIN_SRC emacs-lisp
(defun insert-current-date () (interactive)
       (insert (shell-command-to-string "echo -n $(date +%Y.%m.%d)")))

(bind-key "s-d" 'insert-current-date)
#+END_SRC

* Search

** Auto wrap isearch
#+BEGIN_SRC emacs-lisp
(defadvice isearch-repeat (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-repeat 'after 'isearch-no-fail)
    (ad-activate 'isearch-repeat)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-repeat 'after 'isearch-no-fail)
    (ad-activate 'isearch-repeat)))

(defadvice isearch-search (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)))
#+END_SRC

* Appearance
** Disable splash screen, scroll bar, toolbar, reduce fringe

Disabling scroll bars w/o custom-set-variable: http://emacswiki.org/emacs/ScrollBar

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (fringe-mode '(4 . 4))
)
#+END_SRC

** change scratch major mode and initial contents
HT http://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/

#+BEGIN_SRC emacs-lisp
;; (setq initial-major-mode 'org-mode)
(setq initial-scratch-message "")
#+END_SRC

** Solarized
NB: need to have iterm2 set to report TERM=xterm-16color
for solarized colors to look right in terminal
(https://github.com/sellout/emacs-color-theme-solarized/issues/71)

#+BEGIN_SRC emacs-lisp
;;(add-to-list 'custom-theme-load-path "~/dot-emacs/vendor/solarized")
;;(load-theme 'solarized-light t)

(use-package solarized-theme
  :if window-system
  :init
  (setq solarized-use-variable-pitch nil
        solarized-use-more-italic t
        solarized-emphasize-indicators nil
        solarized-distinct-fringe-background nil
        solarized-high-contrast-mode-line t
        solarized-scale-org-headlines nil
        )
  :config
  (load "solarized-theme-autoloads" nil t)
  (load-theme 'solarized-light t))
#+END_SRC

disable theme before switching using =load-theme=
http://stackoverflow.com/a/15595000/351392
#+BEGIN_SRC emacs-lisp
(defadvice load-theme
  (before theme-dont-propagate activate)
  (mapc #'disable-theme custom-enabled-themes))
#+END_SRC

** Use Inconsolata font
#+BEGIN_SRC emacs-lisp
(when (member "Inconsolata" (font-family-list))
	    (set-default-font "Inconsolata")
	    (set-face-attribute 'default nil :font "Inconsolata" :height 140))
#+END_SRC

** Colors in shell mode
FIXME
#+BEGIN_SRC emacs-lisp
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC

* expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :config
  (bind-key  "C-." 'er/expand-region))
#+end_src

* yasnippet

#+begin_src emacs-lisp :tangle no
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/dot-emacs/snippets/ess-mode")
(yas-global-mode 1)
#+end_src

* Major modes
** ess

(installed from melpa)

#+BEGIN_SRC emacs-lisp
(require 'htmlize)
(use-package ess-site
  :mode ("\\.R\\'" . R-mode)
  :config
  (ess-toggle-underscore nil)
  (bind-key "s-r" 'ess-eval-buffer-and-go ess-mode-map)
  (add-hook 'inferior-ess-mode-hook (lambda ()
                                      (progn
                                        (set-variable 'comint-scroll-to-bottom-on-output 'this)
                                        (set-variable 'comint-scroll-show-maximum-output t)
                                        (set-variable 'comint-scroll-to-bottom-on-input 'this))))


  ;; ;; prevent indentation of doom
  ;; (add-hook 'ess-mode-hook
  ;;           (lambda ()
  ;;             (setq ess-first-continued-statement-offset 2)
  ;;             (setq ess-continued-statement-offset 0)
  ;;             (setq ess-indent-level 2)))


  ;; use rstudio style
  (setq ess-default-style 'RStudio)
  )

#+END_SRC
** org

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))

;; indent subtrees by default
(setq org-startup-indented t)

;; src indentation
;; HT http://stackoverflow.com/questions/9764583/strange-indentation-within-emacs-org-mode-src-block
(setq org-src-preserve-indentation t)

;; src block languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (emacs-lisp . t)
   (ruby . t)
   (sh . t)
   (python .t)
   (scheme . t)
   ))

(setq org-src-fontify-natively t)
(setq org-src-window-setup (quote current-window))
(setq org-confirm-babel-evaluate nil)
#+END_SRC
*** Open URLs in Chrome
#+BEGIN_SRC emacs-lisp
(defun open-url-in-chrome (url)
  "Open URL in Google Chrome.  I use AppleScript to do several things:
  1. I tell Chrome to come to the front. If Chrome wasn't launched, this will also launch it.
  2. If Chrome has no windows open, I tell it to create one.
  3. If Chrome has a tab showing URL, I tell it to reload the tab, make that tab the active tab in its window, and bring its window to the front.
  4. If Chrome has no tab showing URL, I tell Chrome to make a new tab (in the front window) showing URL."
  (when (symbolp url)
    ; User passed a symbol instead of a string.  Use the symbol name.
    (setq url (symbol-name url)))
  (do-applescript (format "
tell application \"Google Chrome\"
        activate
        set theUrl to %S
        if character 1 of theUrl is \"/\" then
                set theUrl to \"file://\" & theUrl
        end if

        if (count every window) = 0 then
                make new window
                set URL of active tab of window 1 to theURL
        end if


        set found to false
        set theTabIndex to -1
        repeat with theWindow in every window
                set theTabIndex to 0
                repeat with theTab in every tab of theWindow
                        set theTabIndex to theTabIndex + 1
                        if theTab's URL = theUrl then
                                set found to true
                                exit
                        end if
                end repeat

                if found then
                        exit repeat
                end if
        end repeat

        if found then
                tell theTab to reload
                set theWindow's active tab index to theTabIndex
                set index of theWindow to 1
        else
               set theTab to make new tab at end of tabs of window 1
               set URL of theTab to theURL
        end if
end tell" url)))

(defun replace-org-export-as-html-and-open ()
  (defun org-export-as-html-and-open (arg)
    "long"
    (interactive "P")
    (org-export-as-html arg 'hidden)
    (message buffer-file-name)
    (open-url-in-chrome buffer-file-name)
    (when org-export-kill-product-buffer-when-displayed
      (kill-buffer (current-buffer))))
)

(add-hook 'org-mode-hook 'replace-org-export-as-html-and-open)
#+END_SRC

*** LaTeX

Enable source-specials for Control-click forward/reverse search.
#+BEGIN_SRC emacs-lisp
(add-hook
 'LaTeX-mode-hook
 (lambda ()
   (TeX-PDF-mode 1)
   (TeX-source-correlate-mode 1)
   (setq TeX-source-correlate-method 'synctex)
   (setq TeX-view-program-list
         '(("Skim"
            "/Applications/Skim.app/Contents/SharedSupport/displayline -g %n %o %b"))
         TeX-view-program-selection
         '((output-pdf "Skim")))))
#+END_SRC

turn on reftex
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
#+END_SRC

add texcount to menu

HT http://app.uio.no/ifi/texcount/faq.html#emacs
HT http://stackoverflow.com/a/2736153/351392

(after running command, do C-c C-l to view)

#+BEGIN_SRC emacs-lisp
(eval-after-load "tex"
  '(add-to-list 'TeX-command-list
                (list "TeXcount" "texcount %s.tex" 'TeX-run-command nil t)))
#+END_SRC

FIXME. Oh god this is a shambles.

cribbed a bunch from http://kieranhealy.org/blog/archives/2011/01/21/exporting-org-mode-to-pdf-via-xelatex/

#+BEGIN_SRC emacs-lisp

;; (require 'org-latex)
;; (setq org-export-latex-listings t)

;; (defun my-auto-tex-cmd ()
;;   "When exporting from .org with latex, automatically run latex,
;;    pdflatex, or xelatex as appropriate, using latemxk."
;;   (let ((texcmd)))
;;     ;; default command: oldstyle latex via dvi
;;     (setq texcmd "latexmk -dvi -pdfps %f")
;;     ;; pdflatex -> .pdf
;;     (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
;; 	(setq texcmd "latexmk -pdf %f"))
;;     ;; xelatex -> .pdf
;;     (if (string-match "LATEX_CMD: xelatex" (buffer-string))
;; 	(setq texcmd "latexmk -pdflatex=xelatex -pdf %f"))
;;     (setq org-latex-to-pdf-process (list texcmd)))

;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)

;; ;; Default packages included in every tex file, pdflatex or xelatex
;; (setq org-export-latex-packages-alist
;;       '(("" "graphicx" t)
;; 	("" "longtable" nil)
;; 	("" "float" nil)))

;; (defun my-auto-tex-parameters ()
;;   "Automatically select the tex packages to include."
;;   ;; default packages for ordinary latex or pdflatex export
;;   (setq org-export-latex-default-packages-alist
;; 	'(("AUTO" "inputenc" t)
;; 	  ("T1"   "fontenc"   t)
;; 	  (""     "fixltx2e"  nil)
;; 	  (""     "wrapfig"   nil)
;; 	  (""     "soul"      t)
;; 	  (""     "textcomp"  t)
;; 	  (""     "marvosym"  t)
;; 	  ("nointegrals" "wasysym"   t)
;; 	  (""     "latexsym"  t)
;; 	  (""     "amssymb"   t)
;; 	  (""     "amsmath"   t)
;; 	  (""     "hyperref"  nil)))

;;   ;; Packages to include when xelatex is used
;;   ;; (see https://github.com/kjhealy/latex-custom-kjh for the
;;   ;; non-standard ones.)
;;   (if (string-match "LATEX_CMD: xelatex" (buffer-string))
;;       (setq org-export-latex-default-packages-alist
;; 	    '(("" "fontspec" t)
;; 	      ("" "xunicode" t)
;; 	      ("" "url" t)
;; 	      ("" "rotating" t)
;; ;;	      ("" "memoir-article-styles" t)
;; ;;	      ("american" "babel" t)
;; 	      ("babel" "csquotes" t)
;; 	      ("" "listings" nil)
;; 	      (""     "amssymb"   t)
;; 	      (""     "amsmath"   t)
;; ;;	      ("" "listings-sweave-xelatex" nil)
;; 	      ("svgnames" "xcolor" t)
;; 	      ("" "soul" t)
;; 	      ("xetex, colorlinks=true, urlcolor=FireBrick, plainpages=false, pdfpagelabels, bookmarksnumbered" "hyperref" nil)
;; 	      )))

;;   ;; (if (string-match "LATEX_CMD: xelatex" (buffer-string))
;;   ;;     (setq org-export-latex-classes
;;   ;; 	    (cons '("article"
;;   ;; 		    "\\documentclass[letterpaper]{article}
;;   ;; \\usepackage[style=authoryear-comp-ajs, abbreviate=true]{biblatex}
;;   ;; \\bibliography{refs}"
;;   ;; 		    ("\\section{%s}" . "\\section*{%s}")
;;   ;; 		    ("\\subsection{%s}" . "\\subsection*{%s}")
;;   ;; 		    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;   ;; 		    ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;   ;; 		    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
;;   ;; 		  org-export-latex-classes)))
;; )

;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
#+END_SRC

*** Display images inline after code evaluation

HT: https://github.com/erikriverson/org-mode-R-tutorial/blob/master/org-mode-R-tutorial.org

TODO: only run org-display-inline-images after execution if STARTUP: inlineimages is set
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
#+end_src

*** org-src

bind s-s to org-edit-src-save:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-src-mode-hook (lambda ()
                               (local-set-key (kbd "s-s") 'org-edit-src-save)))
#+END_SRC
** Church
#+BEGIN_SRC emacs-lisp
(require 'church)
(setq quack-fontify-style nil)
(setq quack-programs (quote ("o" "bigloo" "csi" "csi -hygienic" "gosh" "gracket" "gsi" "gsi ~~/syntax-case.scm -" "guile" "kawa" "mit-scheme" "racket" "racket -il typed/racket" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi" "ikarus" "ssh -t alonzo@nospoon.mit.edu ikarus")))
#+END_SRC

** Tuareg (OCaml)
#+begin_src emacs-lisp
(use-package tuareg
  :ensure
  :mode (("\\.ml\\w?$" . tuareg-mode)
         ("\\.ocaml\\w?" . tuareg-mode))
  )
#+end_src

** LaTeX
*** Enable synctex
#+begin_src emacs-lisp
(setq LaTeX-command "latex -synctex=1")
#+end_src

*** Git-friendly formatting (one sentence per line)
bind to M-n
#+begin_src emacs-lisp
(defun tex-git-friendly ()
  (interactive)
  (replace-string ". " ".\n" nil (region-beginning) (region-end))
  )

(defun LaTeX-mode-keys ()
  "Modify keymaps used by `LaTeX-mode'."

  ;; format a selection in a git-friendly manner (one line per paragraph)
  (local-set-key (kbd "M-n") 'tex-git-friendly)
  ;; shortcut for bold
  (local-set-key (kbd "s-b") (lambda ()  (interactive) (TeX-font nil ?\C-b)))
  ;; shortcut for italic italic
  (local-set-key (kbd "s-i") (lambda ()  (interactive) (TeX-font nil ?\C-e)))
  )

(add-hook 'LaTeX-mode-hook 'LaTeX-mode-keys)
#+end_src

*** visual line mode
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda ()
                           (visual-line-mode 1)))
#+END_SRC

*** linum mode and change linum marker

#+BEGIN_SRC emacs-lisp
(add-hook
 'LaTeX-mode-hook
 (lambda ()
   (linum-mode)
   (set-variable 'linum-format "•")))
#+END_SRC
** js2

from melpa

#+begin_src emacs-lisp
(use-package js2-mode
  :mode (("\\.js$" . js2-mode)
         ("\\.wppl$" . js2-mode))
  :interpreter ("node" . js2-mode)

  :config

  ;; allow missing semicolons
  (setq js2-strict-missing-semi-warning nil)

  ;; 2 spaces for tabs
  (setq js2-basic-offset 2)

  ;; read globals from .jsglobal
  (add-hook 'js2-init-hook
            (lambda ()
              (let ((globals-file (concat (file-name-directory buffer-file-name) ".jsglobal")))
                (when (file-exists-p globals-file)
                  (setq js2-additional-externs (read-lines globals-file))
                  ))))

  (add-hook 'js-mode-hook 'make-enter-indent)
)

#+end_src

#+BEGIN_SRC emacs-lisp
(eval-after-load "js2-mode"
  '(set-face-attribute 'js2-external-variable nil :foreground "#cb4b16"))
#+END_SRC

*** jsx mode

HT http://jbm.io/2014/01/react-in-emacs-creature-comforts/

disable for now because it screws up some indentation for regular js

#+BEGIN_SRC emacs-lisp :tangle no
(defun modify-syntax-table-for-jsx ()
  (modify-syntax-entry ?< "(>")
  (modify-syntax-entry ?> ")<"))

(add-hook 'js-mode-hook 'modify-syntax-table-for-jsx)
#+END_SRC
** Python
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+end_src

#+RESULTS:
: 2


#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (function (lambda ()
                      (setq indent-tabs-mode nil
                            tab-width 2
                            python-indent-offset 2 ;; HT http://www.emacswiki.org/emacs/IndentingPython
                            ))))
#+end_src

#+RESULTS:
| er/add-python-mode-expansions | make-enter-indent | (lambda nil (setq indent-tabs-mode nil tab-width 2)) |

** Markdown
#+begin_src emacs-lisp
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+end_src

I'm apparently using the markdown parser from Ruby's gems, which doesn't play nice with markdown previews / exports.
#+begin_src emacs-lisp
(custom-set-variables '(markdown-command "~/Library/Haskell/bin/pandoc"))
;;(custom-set-variables '(markdown-command "redcarpet"))
#+end_src

Use a css file in ~/dot-emacs/markdown.css
#+begin_src emacs-lisp
(custom-set-variables '(markdown-css-path "file:///Users/long/dot-emacs/markdown.css"))
#+end_src

#+RESULTS:

** shell
*** directory tracking (so autocomplete works even after I use z to jump around)
HT http://www.emacswiki.org/emacs/ShellDirtrackByProcfs

by default, on osx, the messages buffer complains about:
#+BEGIN_EXAMPLE
error in process filter: locate-file: Wrong type argument: stringp, nil
error in process filter: Wrong type argument: stringp, nil
#+END_EXAMPLE

this is because /proc doesn't exist. i had to hack this in using lsof (HT http://stackoverflow.com/a/8331292/351392)

2015/04/02: i had a suspicion that this was slow, so i optimized it a bit by storing pid as a local variable and streamlining the string munging a bit
HT http://stackoverflow.com/a/8331292/351392 for the -a flag
HT http://stackoverflow.com/a/3567515/351392 for the -F flag and the pipes afterwards

#+begin_src emacs-lisp
(defun track-shell-directory/procfs ()
  (shell-dirtrack-mode 0)
  (defvar pid (process-id (get-buffer-process (current-buffer))))
  (add-hook 'comint-preoutput-filter-functions
            (lambda (str)
              (prog1 str
                (when (string-match comint-prompt-regexp str)
                  (cd (shell-command-to-string (format "lsof -a -d cwd -p %s -Fn | tail -1 | cut -c2- | tr -d '\n'" pid))))))
                                                                 nil t))

(add-hook 'shell-mode-hook 'track-shell-directory/procfs)
#+end_src

loading shell based on current buffer's directory (melpa, i think)

#+BEGIN_SRC emacs-lisp
(require 'shell-current-directory)
#+END_SRC

*** make node work by setting NODE_NO_READLINE

HT http://stackoverflow.com/a/16632586/351392

#+BEGIN_SRC emacs-lisp
(setenv "NODE_NO_READLINE" "1")
#+END_SRC

*** clearing shell

#+BEGIN_SRC emacs-lisp
(defun my-shell-clear ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))

(defun my-shell-hook ()
  (local-set-key "\C-cl" 'my-shell-clear))

(add-hook 'shell-mode-hook 'my-shell-hook)
#+END_SRC
** dired

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(setq dired-listing-switches "-aBhl  --group-directories-first")
(setq dired-hide-details-hide-symlink-targets nil)
#+END_SRC

** julia
#+BEGIN_SRC emacs-lisp :tangle no
(require 'julia-mode)
#+END_SRC

** Buffer

C-x C-b occupies whole frame:
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-b" 'buffer-menu)
#+END_SRC

** web-mode

#+BEGIN_SRC emacs-lisp
(use-package
 web-mode
 :mode (("\\.html$" . web-mode)
        ("\\.jsx$" . web-mode))
 :config
 (setq web-mode-markup-indent-offset 2)
)
#+END_SRC


*** quick screenshots

adapted from http://stackoverflow.com/a/31868530/351392
#+BEGIN_SRC emacs-lisp
(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (org-display-inline-images)
  (setq filename
        (concat
         (make-temp-name
          (concat "assets/"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (unless (file-exists-p (file-name-directory filename))
    (make-directory (file-name-directory filename)))
  ; take screenshot
  (if (eq system-type 'darwin)
      (call-process "screencapture" nil nil nil "-i" filename))
  (if (eq system-type 'gnu/linux)
      (call-process "import" nil nil nil filename))
  ; insert into file if correctly taken
  (if (file-exists-p filename)
    (insert (concat "[[./" filename "]]"))))
#+END_SRC

* Minor modes
** ace-jump-mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :config
  (ace-jump-mode-enable-mark-sync)
  (key-chord-define-global "jk" 'ace-jump-mode)
  (key-chord-define-global "kp" 'ace-jump-mode-pop-mark)
  (setq ace-jump-mode-scope 'frame)
)
#+END_SRC

** magit
used to be vendored, but installed from elpa

Bind M-g to magit-status

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("M-g" . magit-status)
  :config

  ;; open magit-status in fullscreen window HT http://stackoverflow.com/a/9440613/351392
  (setq magit-status-buffer-switch-function 'switch-to-buffer)

  ;; show fine differences at current hunk
  ;; HT https://github.com/vincentbernat/dot.emacs/blob/master/magit.conf.el
  ;; HT google for < "word-diff" magit >
  (setq magit-diff-refine-hunk t)

  ;; turn on visual line mode
  ;; HT http://comments.gmane.org/gmane.comp.version-control.git.magit/1114
  (add-hook 'magit-mode-hook 'turn-on-visual-line-mode)

  ;; (set-face-bold 'magit-section-title t)
  )
#+END_SRC

** paredit
#+begin_src emacs-lisp
(autoload 'paredit-mode "paredit"
  "Minor mode for pseudo-structurally editing Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
(add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
(add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
(add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
#+end_src

#+RESULTS:

Use electric-pair-mode for non-lisps:
#+begin_src emacs-lisp :tangle no
;; HT http://stackoverflow.com/a/913823/351392
;; HT http://stackoverflow.com/questions/5298907/emacs-php-mode-and-paredit#comment12995031_5324458

(electric-pair-mode)
#+end_src

#+BEGIN_SRC emacs-lisp :tangle no
(use-package smartparens-config
  :ensure smartparens
  :init
  (setq sp-highlight-pair-overlay nil)
  (setq sp-highlight-wrap-overlay nil)
  (setq sp-highlight-wrap-tag-overlay nil)
  :config
  (smartparens-global-mode)
  (bind-keys
   :map smartparens-mode-map
   ("C-M-a" . sp-beginning-of-sexp)
   ("C-M-e" . sp-end-of-sexp)

   ("C-<down>" . sp-down-sexp)
   ("C-<up>"   . sp-up-sexp)
   ("M-<down>" . sp-backward-down-sexp)
   ("M-<up>"   . sp-backward-up-sexp)

   ("C-M-f" . sp-forward-sexp)
   ("C-M-b" . sp-backward-sexp)

   ("C-M-n" . sp-next-sexp)
   ("C-M-p" . sp-previous-sexp)

   ("C-S-f" . sp-forward-symbol)
   ("C-S-b" . sp-backward-symbol)

   ("C-<right>" . sp-forward-slurp-sexp)
   ("M-<right>" . sp-forward-barf-sexp)
   ("C-<left>"  . sp-backward-slurp-sexp)
   ("M-<left>"  . sp-backward-barf-sexp)

   ("C-M-t" . sp-transpose-sexp)
   ("C-M-k" . sp-kill-sexp)
   ;; ("C-k"   . sp-kill-hybrid-sexp)
   ("M-k"   . sp-backward-kill-sexp)
   ("C-M-w" . sp-copy-sexp)

   ("C-M-d" . delete-sexp)

   ("M-<backspace>" . backward-kill-word)
   ("C-<backspace>" . sp-backward-kill-word)
   ([remap sp-backward-kill-word] . backward-kill-word)

   ("M-[" . sp-backward-unwrap-sexp)
   ("M-]" . sp-unwrap-sexp)

   ;; ("C-x C-t" . sp-transpose-hybrid-sexp)

   ;; ("C-c ("  . wrap-with-parens)
   ;; ("C-c ["  . wrap-with-brackets)
   ;; ("C-c {"  . wrap-with-braces)
   ;; ("C-c '"  . wrap-with-single-quotes)
   ;; ("C-c \"" . wrap-with-double-quotes)
   ;; ("C-c _"  . wrap-with-underscores)
   ;; ("C-c `"  . wrap-with-back-quotes)

   ))
#+END_SRC

** origami

#+BEGIN_SRC emacs-lisp
(use-package origami
  :defer t
  :config
  (add-to-list 'origami-parser-alist '(css-mode . origami-c-style-parser))
  (add-to-list 'origami-parser-alist '(latex-mode . origami-c-style-parser))
  (add-to-list 'origami-parser-alist '(ess-mode . origami-c-style-parser))
  (bind-key "s-;" 'origami-toggle-node origami-mode-map))
#+END_SRC

** vimish-fold

#+BEGIN_SRC emacs-lisp
(add-hook 'vimish-fold-mode-hook
          (lambda ()
            (interactive)
            (local-set-key (kbd "C-;") 'vimish-fold)
            (local-set-key (kbd "s-;") 'vimish-fold-toggle)))
;; (add-hook 'js-mode-hook 'vimish-fold-mode)
#+END_SRC

** sweetjs

#+BEGIN_SRC emacs-lisp
(use-package sweetjs-mode
  :load-path "vendor/sweetjs-mode"
  :mode "\\.sjs$")
#+END_SRC

* node repl

HT http://www.emacswiki.org/emacs/NodeJs

#+BEGIN_SRC emacs-lisp
(defun node-repl ()
  (interactive)
  (pop-to-buffer (make-comint "node-repl" "node" nil "--interactive")))
#+END_SRC

* todo setup

#+begin_src emacs-lisp
(defun tdo ()
  (interactive)

  ;; HT http://www.gnu.org/software/emacs/manual/html_node/emacs/Select-Buffer.html
  (switch-to-buffer-other-frame "todo"))
#+end_src

* lazy writing (capitalize heads of sentences)

this works assuming that i have one sentence per line

#+BEGIN_EXAMPLE
search:  ^\([a-z]\)
replace: \,(upcase \1)
#+END_EXAMPLE

* custom face setting

#+BEGIN_SRC emacs-lisp
(set-face-background 'show-paren-match "#99ccff")
(set-face-background 'org-block "#eee8d5")

(set-face-attribute 'org-block-begin-line nil :underline t)
(set-face-attribute 'org-block-end-line nil :overline t :underline nil)

;; use old org mode line headers
;; TODO: figure out how to get color defs from solarized
;; rather than manually listing them here
(let ((yellow    "#b58900")
      (orange    "#cb4b16")
      (red       "#dc322f")
      (magenta   "#d33682")
      (violet    "#6c71c4")
      (blue      "#268bd2")
      (cyan      "#2aa198")
      (green     "#859900"))
  (set-face-attribute 'org-level-1 nil :foreground blue)
  (set-face-attribute 'org-level-2 nil :foreground cyan)
  (set-face-attribute 'org-level-3 nil :foreground yellow)
  (set-face-attribute 'org-level-4 nil :foreground red)
  (set-face-attribute 'org-level-5 nil :foreground "#657b83")
  (set-face-attribute 'org-level-6 nil :foreground "#586e75")
  (set-face-attribute 'org-level-7 nil :foreground orange)
  (set-face-attribute 'org-level-8 nil :foreground violet)
  (set-face-attribute 'org-block nil :foreground "black")
  )
#+END_SRC


* how to remove submodules


#+BEGIN_EXAMPLE
git submodule deinit vendor/submodule-name
rm -rf .git/modules/vendor/submodule-name
# then remove the corresponding entry from .gitmodules
#+END_EXAMPLE


* living with nightlies

for synctex to work, we need a working emacsclient binary inside /usr/bin. we do this by:

#+BEGIN_EXAMPLE
sudo ln -s /Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_9/emacsclient /usr/bin/
#+END_EXAMPLE

* profiling startup

HT
http://stackoverflow.com/a/5762495/351392
http://oremacs.com/2015/02/24/emacs-speed-test/

#+BEGIN_SRC sh
emacs -Q -l profile-dotemacs.el \
    --eval "(setq profile-dotemacs-file \
        (setq load-file-name \"init.el\"))" \
    -f profile-dotemacs
#+END_SRC
